// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5nhZ9m14m3GkNgmNfUwqFT
// Component: gfxpDpG2Jsn
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: x-GfUw5JKb4/component

import { useScreenVariants as useScreenVariants_1RKeZzinsHHbtQ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 1rKEZzinsHHbtQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_demassus_portfolio.module.css"; // plasmic-import: 5nhZ9m14m3GkNgmNfUwqFT/projectcss
import sty from "./PlasmicGd.module.css"; // plasmic-import: gfxpDpG2Jsn/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: 3li1cXihw_m2M1/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: 0R8ZZxyPimeksU/icon

export type PlasmicGd__VariantMembers = {};

export type PlasmicGd__VariantsArgs = {};
type VariantPropType = keyof PlasmicGd__VariantsArgs;
export const PlasmicGd__VariantProps = new Array<VariantPropType>();

export type PlasmicGd__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicGd__ArgsType;
export const PlasmicGd__ArgProps = new Array<ArgPropType>("children");

export type PlasmicGd__OverridesType = {
  root?: p.Flex<"div">;
  handsRandomStuff?: p.Flex<"div">;
};

export interface DefaultGdProps {}

function PlasmicGd__RenderFunc(props: {
  variants: PlasmicGd__VariantsArgs;
  args: PlasmicGd__ArgsType;
  overrides: PlasmicGd__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_1RKeZzinsHHbtQ()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <div className={classNames(projectcss.all, sty.freeBox__jp8Jn)}>
              <div
                data-plasmic-name={"handsRandomStuff"}
                data-plasmic-override={overrides.handsRandomStuff}
                className={classNames(projectcss.all, sty.handsRandomStuff)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__w5ATz)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("auto" as const)
                      : ("324px" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("100%" as const)
                      : ("100%" as const)
                  }
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("105px" as const)
                      : ("auto" as const)
                  }
                  loading={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("lazy" as const)
                      : ("lazy" as const)
                  }
                  src={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? {
                          src: "/plasmic/copy_of_demassus_portfolio/images/group1.svg",
                          fullWidth: 120.929,
                          fullHeight: 319.179,
                          aspectRatio: 0.378125
                        }
                      : {
                          src: "/plasmic/copy_of_demassus_portfolio/images/group1.svg",
                          fullWidth: 120.929,
                          fullHeight: 319.179,
                          aspectRatio: 0.378125
                        }
                  }
                />
              </div>

              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__gm6Fb)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("327px" as const)
                      : ("373px" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("none" as const)
                      : ("none" as const)
                  }
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("auto" as const)
                      : ("64px" as const)
                  }
                  loading={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("lazy" as const)
                      : ("lazy" as const)
                  }
                  src={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? {
                          src: "/plasmic/copy_of_demassus_portfolio/images/group.svg",
                          fullWidth: 92.46,
                          fullHeight: 572.244,
                          aspectRatio: 0.162304
                        }
                      : {
                          src: "/plasmic/copy_of_demassus_portfolio/images/group.svg",
                          fullWidth: 92.46,
                          fullHeight: 572.244,
                          aspectRatio: 0.162304
                        }
                  }
                />
              ) : null}
            </div>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__hfdlH)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <React.Fragment>
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__cwW)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ckmZo
                        )}
                      >
                        {"Woohoo, I'm Working on this page"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nv1F9
                        )}
                      >
                        {
                          "It'll be done shortly. Okay, say hello to my microcopy!"
                        }
                      </div>
                    </p.Stack>

                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__qiQid
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hf7Jp
                        )}
                      >
                        {"Take me home"}
                      </div>
                    </Button>
                  </React.Fragment>
                ),
                value: args.children
              })}
            </p.Stack>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "handsRandomStuff"],
  handsRandomStuff: ["handsRandomStuff"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  handsRandomStuff: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGd__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGd__VariantsArgs;
    args?: PlasmicGd__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGd__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicGd__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicGd__ArgProps,
      internalVariantPropNames: PlasmicGd__VariantProps
    });

    return PlasmicGd__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGd";
  } else {
    func.displayName = `PlasmicGd.${nodeName}`;
  }
  return func;
}

export const PlasmicGd = Object.assign(
  // Top-level PlasmicGd renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    handsRandomStuff: makeNodeComponent("handsRandomStuff"),

    // Metadata about props expected for PlasmicGd
    internalVariantProps: PlasmicGd__VariantProps,
    internalArgProps: PlasmicGd__ArgProps
  }
);

export default PlasmicGd;
/* prettier-ignore-end */
